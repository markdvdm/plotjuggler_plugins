/// This file was autogenerated by elroy_common_msg, do not modify
/// @copyright Copyright 2022 Elroy Air Inc. All rights reserved.
/// @author elroy_common_msg autogen

#ifndef {{ class.metadata.file.header.include_guard }}
#define {{ class.metadata.file.header.include_guard }}

{% for include in class.metadata.file.header.includes %}
#include "{{ include }}"
{% endfor %}
#include "msg_packing_util/msg_packing_util.h"
#include <variant>
#include <map>

{% if "namespace" in class %}
namespace elroy_common_msg::{{ class.namespace }} { 
{% else %}
namespace elroy_common_msg {
{% endif %}
class {{ class.name }}Message {% if class.inherit is defined %}: public {{ class.inherit.name }}Message {% endif %} {
 public:
  using TPayloadType = {{ class.name }};

  /// @brief default constructor
  /// @note data members are initialized below in class body
  {{ class.name }}Message()
  :{% if class.inherit is defined %}
 {{ class.inherit.name }}Message(MessageId::{{ class.name }})
  {% endif %}  {
  }

  /// @brief copy constructor
  /// @note allows Amsg = Bmsg
  {{ class.name }}Message(const {{class.name}}Message &src)
  {% if class.inherit is defined %}
  : {{ class.inherit.name }}Message(src)
  {% else %}
  :
  {%- endif %}
  {% if class.members is defined %}
    {% for member in class.metadata.members %}
    {% if member.array_len is not defined %}
    {{- "  ," if loop.first and class.inherit is defined }}
    {{- "  , " if not loop.first else " " -}}{{ member.name }}_{src.{{member.name}}_}
    {% endif %}
    {% endfor %}
  {% endif %}  {
    {% if class.members is defined %}
      {% for member in class.metadata.members %}
        {% if member.array_len is defined %}
    // deepcopy {{ member.name }}_
    for (int i = 0; i < {{member.array_len}}; i++) {
      {{ member.name }}_[i] = src.{{ member.name }}_[i];
    }
        {% endif %}
      {% endfor %}
    {% endif %}
  }

  /// @brief default assignment operator
  {{ class.name }}Message &operator=(const {{class.name}}Message &src) = default;

  /// @brief constructs this message with equivalent struct
  {{ class.name }}Message(const {{ class.name }}& src)
  : {% if class.inherit is defined %}
{{ class.inherit.name }}Message(MessageId::{{ class.name }}
    {%- if "BusObject" not in class.inherit.name|string() -%}
    , src)
    {% else %})
    {% endif %}
  {% endif %}
  {% if class.members is defined %}
    {% for member in class.metadata.members %}
    {% if member.array_len is not defined %}
    {{- "  ," if loop.first and class.inherit is defined }}
    {{- "  , " if not loop.first else " " -}}{{ member.name }}_{src.{{member.name}}_}
    {% endif -%}
    {% endfor %}
  {% endif %}  {
    {% if class.members is defined %}
      {% for member in class.metadata.members %}
        {% if member.array_len is defined %}
    // deepcopy {{member.name}}_
    for (int i = 0; i < {{member.array_len}}; i++) {
      {{ member.name }}_[i] = src.{{ member.name }}_[i];
    }
        {% endif %}
      {% endfor %}
    {% else %}
    (void)src;
    {% endif %}
  }

  /// @brief default destructor
  virtual ~{{ class.name }}Message() = default;

  /// @brief Returns the encoded size of this message WITHOUT crc
  /// @return the encoded size of this message without a crc
  virtual size_t GetPackedSizeWithoutCrc(void) const noexcept {{ "override " if not class.metadata.inherit.children }}{
    return {% if class.inherit is defined %}{{ class.inherit.name }}Message::{{ "GetPackedSizeWithoutCrc()" if class.inherit.name != "BusObject" else "do_getPackedSize()"}}{% endif %}
    {% if class.members is defined %}
      {%- if class.inherit is defined %}
      {{- " +"}} 
      {% endif %}
      {% for member in class.metadata.members %}
        {% if member.is_struct is defined %}
      {{ member.name }}_{{ "[0]" if member.array_len is defined }}.GetPackedSize() 
        {%- if member.array_len is defined %} * {{member.array_len}}{% endif -%}
        {%- else %}
      sizeof({{ member.name }}_)
        {%- endif -%}
      {%- if not loop.last %} +
        {% else %}
        {%  endif %}
      {% endfor -%}
    {%- else %}
    {% endif %};
  }

  /// @brief Packs this message into an array without a CRC
  /// @note all encoding is little endian
  /// @param[out] dest array to destination array
  /// @param[in] dest_size size of dest array, needs to
  ///            be >= {{ class.name }}.GetPackedSizeWithoutCrc()
  /// @note dest_size is included as a contract to keep
  ///       the calling code honest
  /// @return number of bytes encoded. Will equal
  ///         GetPackedSizeWithoutCrc() and be <= dest_size
  virtual size_t PackWithoutCrc(uint8_t* dest, size_t dest_size) const noexcept {{ "override " if not class.metadata.inherit.children }}{
    assert(dest_size >= GetPackedSizeWithoutCrc());
    size_t bytes_packed = 0;
    {% if class.inherit is defined %}
    bytes_packed += {{ class.inherit.name }}Message::{{ "PackWithoutCrc" if class.inherit.name != "BusObject" else "do_pack"}}(&dest[bytes_packed], dest_size);
    {% endif %}
    {% if class.members is defined %}
      {% for member in class.metadata.members %}
          {% if member.array_len is defined %}
            {% if member.is_struct is defined %}
    for (int i = 0; i < {{ member.array_len }}; i++) {
      bytes_packed += {{ member.name }}_[i].Pack(&dest[bytes_packed], dest_size - bytes_packed);
    }
            {% else %}
    for (int i = 0; i < {{ member.array_len }}; i++) {
      bytes_packed += elroy_common_msg::MsgPackingUtil::Pack(&dest[bytes_packed], {{ member.name }}_[i]);
    }
            {% endif %}
          {% else %}
            {% if member.is_struct is defined %}
    bytes_packed += {{ member.name }}_.Pack(&dest[bytes_packed], dest_size - bytes_packed);
            {% else %}
    bytes_packed += elroy_common_msg::MsgPackingUtil::Pack(&dest[bytes_packed], {{ member.name }}_);
            {% endif %}
          {% endif %}
      {% endfor %}
    {% endif %}
    (void)dest;
    (void)dest_size;
    return bytes_packed;
  }

  /// @brief Unpacks this message from an array without a crc
  /// @note all decoding is little endian
  /// @param[in] src src array
  /// @param[in] src_size size of the src array, needs to
  ///            be >= {{ class.name }}.GetPackedSizeWithoutCrc()
  /// @note src_size is included as a contract to keep the
  ///       calling code honest
  /// @return number of bytes decoded. Will equal
  ///         GetPackedSizeWithoutCrc() and be <= src_size
  virtual size_t UnpackWithoutCrc(const uint8_t* src, size_t src_size) noexcept {{ "override " if not class.metadata.inherit.children }}{
    assert(src_size >= GetPackedSizeWithoutCrc());
    size_t bytes_unpacked = 0;
    {% if class.inherit is defined %}
    bytes_unpacked += {{ class.inherit.name }}Message::{{ "UnpackWithoutCrc" if class.inherit.name != "BusObject" else "do_unpack"}}(&src[bytes_unpacked], src_size);
    {% endif %}
    {% if class.members is defined %}
      {% for member in class.metadata.members %}
          {% if member.array_len is defined %}
            {% if member.is_struct is defined %}
    for (int i = 0; i < {{member.array_len}}; i++) {
      bytes_unpacked += {{ member.name }}_[i].Unpack(&src[bytes_unpacked], src_size - bytes_unpacked);
    }
            {% else %}
    for (int i = 0; i < {{member.array_len}}; i++) {
      bytes_unpacked += elroy_common_msg::MsgPackingUtil::Unpack({{ member.name }}_[i], &src[bytes_unpacked]);
    }
            {% endif %}
          {% else %}
            {% if member.is_struct is defined %}
    bytes_unpacked += {{member.name}}_.Unpack(&src[bytes_unpacked], src_size - bytes_unpacked);
            {% else %}
    bytes_unpacked += elroy_common_msg::MsgPackingUtil::Unpack({{ member.name }}_, &src[bytes_unpacked]);
            {% endif %}
          {% endif %}
      {% endfor %}
    {% endif %}
    (void)src;
    (void)src_size;
    return bytes_unpacked;
  }

  /// @brief Reads this message and updates dest
  /// @param[out] dest the destination struct
  /// @note mutex is locked on entry
  void Read({{ class.name }}& dest) const noexcept {
    {% if class.inherit is defined %}
      {% if "BusObject" not in class.inherit.name|string() %}
    // read from base class
    {{ class.inherit.name }}Message::Read(dest);
      {% endif %}
    {% endif %}
    {% if class.members is defined %}
      {% for member in class.metadata.members %}
          {% if member.array_len is defined %}
    for (int i = 0; i < {{member.array_len}}; i++) {
      dest.{{member.name}}_[i] = {{member.name}}_[i];
    }
            {% else %}
    dest.{{ member.name }}_ = {{member.name}}_;
          {% endif %}
      {% endfor %}
    {% else %}
    (void)dest;
    {% endif %}
  }

  /// @brief Read this object as a map. If the type of a child is std::is_base_of<BusObject, typeof(child)>, then 
  /// recursively call the ReadAsMap.
  /// @param[in/out] destination map to write data to
  /// @param prefix Prefix to add to the beginning of all map keys for this object
  /// @param delim Delimiter used to signify levels of nesting in a message
  bool ReadAsMap(std::unordered_map<std::string, std::variant<std::string, double, bool>> &map, const std::string& prefix = "", const std::string& delim="."){
    bool res = true;
    {% if class.members is defined %}
      {% for member in class.metadata.members -%}
        {% if member.array_len is defined %}
          {% for index in range(member.array_len) %}
            {% if member.is_enum is defined %}
    map[prefix + delim + "{{member.name}}_str_[{{index}}]"] = EnumToString({{member.name}}_[{{index}}]);
    map[prefix + delim + "{{member.name}}_[{{index}}]"] = static_cast<double>(EnumToArrayIndex({{member.name}}_[{{index}}]));
            {% elif member.type in struct_types %}
    res &= {{member.name}}_[{{index}}].ReadAsMap(map, prefix + delim + "{{member.name}}_[{{index}}]", delim);        
            {% elif member.is_struct is defined %}
    res &= {{member.name}}_[{{index}}].ReadAsMap(map, prefix + delim + "{{member.name}}_[{{index}}]", delim);
            {% elif member.type in ["uint32_t", "uint8_t", "float", "uint16_t", "int16_t", "int32_t", "double", "uint64_t","int64_t", "size_t"] %}
    map[prefix + delim + "{{member.name}}"] = static_cast<double>({{member.name}}_[{{index}}]);
            {% else %}
    map[prefix + delim + "{{member.name}}_[{{index}}]"] = {{member.name}}_[{{index}}];
            {% endif %}
          {% endfor %}
        {% elif member.type in ["uint32_t", "uint8_t", "bool", "float", "uint16_t", "int16_t", "int32_t", "double", "uint64_t", "int64_t", "size_t"] %}
    map[prefix + delim + "{{member.name}}"] = static_cast<double>({{member.name}}_);
        {% elif member.type in ["bool"] %}
    map[prefix + delim + "{{member.name}}"] = {{member.name}}_;
        {% elif member.type in ["string"] %}
    map[prefix + delim + "{{member.name}}"] = {{member.name}}_;
        {% elif member.is_struct is defined %}
    res &= {{member.name}}_.ReadAsMap(map, prefix + delim + "{{member.name}}", delim);
        {% elif member.is_enum is defined %}
    map[prefix + delim + "{{member.name}}_str"] = EnumToString({{member.name}}_);
    map[prefix + delim + "{{member.name}}"] = static_cast<double>(EnumToArrayIndex({{member.name}}_));
        {% else %}
    throw("JINJA_ERROR: message_header.jinja2 was unable to generate a Map for {{member.name}}");
    {{member}}
        {% endif %} 
      {%- endfor %}
    {% endif %}
    return res;
  }

  /// @brief Updates this message from src
  /// @param[in] src the src data
  /// @note mutex is locked on entry
  void Write(const {{ class.name }}& src) noexcept {
    {% if class.inherit is defined %}
      {% if "BusObject" not in class.inherit.name|string() %}
    // write from base class
    {{ class.inherit.name }}Message::Write(src);
      {% endif %}
    {% endif %}
    {% if class.members is defined %}
      {% for member in class.metadata.members %}
          {% if member.array_len is defined %}
    for (int i = 0; i < {{member.array_len}}; i++) {
      {{member.name}}_[i] = src.{{member.name}}_[i];
    }
            {% else %}
    {{member.name}}_ = src.{{ member.name }}_;
          {% endif %}
      {% endfor %}
    {% else %}
    (void)src;
    {% endif %}
  }

 protected:
  {% if class.metadata.inherit.children %}
  /// @brief Protected constructor to pass down id
  /// @param[in] Message ID
  /// @param[in] src the source struct
  explicit {{ class.name }}Message(const MessageId id, const {{ class.name }}& src)
  :{% if class.inherit is defined %}
 {{ class.inherit.name }}Message(id)
  {% endif %}
  {% if class.members is defined %}
    {% for member in class.metadata.members %}
    {% if member.array_len is not defined %}
    {{- "  ," if loop.first and class.inherit is defined }}
    {{- "  , " if not loop.first else " " -}}{{ member.name }}_{src.{{member.name}}_}
    {% endif -%}
    {% endfor %}
  {% endif %}  {
    {% if class.members is defined %}
      {% for member in class.metadata.members %}
        {% if member.array_len is defined %}
    // deepcopy of {{member.name}}_
    for (int i = 0; i < {{member.array_len}}; i++) {
      {{ member.name }}_[i] = src.{{ member.name }}_[i];
    }
        {% endif %}
      {% endfor %}
    {% endif %}
  }

  /// @brief Protected constructor to pass down id
  /// @param[in] Message ID
  explicit {{ class.name }}Message(const MessageId id)
  :{% if class.inherit is defined %}
 {{ class.inherit.name }}Message(id)
  {{", " if class.members is defined }} {% endif %}
  {% if class.members is defined %}
    {% for member in class.metadata.members %}
      {{- "" if loop.index == 1 else "  , " }}{{ member.name }}_{}
    {% endfor %}
  {% endif %}  {
  }

  {% endif %}
  {% if class.members is defined %}
  /// member data
  {% for member in class.metadata.members %}
  {{ member.type }} {{ member.name }}_{% if member.array_len is defined %}[{{ member.array_len }}]{% endif %}
      {% if member.default is defined -%} {{- " " -}} = {{-" "-}}
        {%- if member.array_len is defined %}
          {% set len = member.array_len | int %}
            {{- "{"}}
            {%- for i in range(0, len) -%}
              {{- member.default -}}
              {{- "," if not loop.last -}}
            {% endfor -%}
            {{- "}"}}
        {%- else -%}
          { {{ member.default if (member.type != "bool") else member.default|string|lower }} }
        {%- endif -%}
      {%- else %}
        {{- " = {}"-}}
      {%- endif %};
  {% endfor %}
  {% else %}
  /// {{ class.name }} has no member data
  {% endif %}
};

} // namespace {% if "namespace" in class %} {{class.namespace}} {% else %}elroy_common_msg {% endif %}

#endif   //  {{ class.metadata.file.header.include_guard }}
{{ "" }}
