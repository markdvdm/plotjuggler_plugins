/// @copyright Copyright 2022 Elroy Air Inc. All rights reserved.
/// @author elroy_common_msg autogeneration

#ifndef ELROY_COMMON_MSG_MSG_HANDLING_MSG_HANDLER_H_
#define ELROY_COMMON_MSG_MSG_HANDLING_MSG_HANDLER_H_

{% for msg in msg_handling.msgs %}
#include "{{ msg.class.metadata.file.path }}.h"
{% endfor %}

namespace elroy_common_msg {

/// @brief IMsgHandler class provides common a psuedo-pure virtual
///        interface to handle all message types.
/// @note IMsgHandle is pseudo pure virtual as to allow derived classes
///       the option of implementing only the message handling required
///       The default functionality of this interface is to
///         1. cast message to BusObjectMessage
///         2. invoke base `Handle` message, resulting in an
///            assert during development
///        Note: As system error logging gets flushed out, the assert
///        will be replaced by an error log (likely development build
///        will still case an assert for immediate fix)
/// @note Const and non-const functions provided for flexibility
class IMsgHandler {
 public:
  /// @brief Non-const Handle functions for all defined messages
  /// @note all handlers default cast msgs to base class, call base handler
  /// @param[in] msg const pointer to const msg
  {% for msg in msg_handling.msgs %}
    {%- if msg.class.namespace is defined %} {% set namespace = "elroy_common_msg::" ~ msg.class.namespace %}
    {%- else -%}{% set namespace = "elroy_common_msg" %}
    {%- endif -%}
  virtual void Handle(const {{namespace}}::{{msg.class.name}}Message& msg) noexcept { Handle(static_cast<const elroy_common_msg::BusObjectMessage&>(msg)); }
  {% endfor %}
  virtual void Handle(const elroy_common_msg::BusObjectMessage& msg) noexcept { (void)msg; assert(false); }

  /// @brief Const Handle functions for all defined messages
  /// @note all handlers default cast msgs to base class, call base handler
  /// @param[in] msg const pointer to const msg
  {% for msg in msg_handling.msgs %}
    {%- if msg.class.namespace is defined %} {% set namespace = "elroy_common_msg::" ~ msg.class.namespace %}
    {%- else -%}{% set namespace = "elroy_common_msg" %}
    {%- endif -%}
  virtual void Handle(const {{namespace}}::{{msg.class.name}}Message& msg) const noexcept { Handle(static_cast<const elroy_common_msg::BusObjectMessage&>(msg)); }
  {% endfor %}
  virtual void Handle(const elroy_common_msg::BusObjectMessage &msg) const noexcept { (void)msg; assert(false); }
};

}  // namespace elroy_common_msg

#endif  // ELROY_COMMON_MSG_MSG_HANDLING_MSG_HANDLER_H_